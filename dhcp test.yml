---
# =============================================================================
# FortiGate DHCP Reserved Address 智能管理 Playbook (REST API版本)
# 
# 功能說明：
# 1. 根據提供的IP、MAC、Description參數智能更新DHCP reserved-address
# 2. 自動檢測MAC地址衝突，避免重複分配
# 3. 支持新增和更新既有配置
# 4. 使用REST API直接調用，避免collection類型問題
# 
# 作者：VICI Network Team
# 版本：v2.1 - 變數定義修正版
# =============================================================================

- name: FortiGate DHCP Reserved Address 智能管理
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # =======================================================================
    # 變數定義區（修正版）
    # =======================================================================
    
    # 用戶輸入參數（從AWX Survey或Extra Variables獲取）
    target_ip: "{{ ip_param }}"                    # 目標IP地址
    target_mac: "{{ mac_param }}"                  # 目標MAC地址
    target_description: "{{ desc_param }}"        # 目標描述
    
    # FortiGate系統參數
    dhcp_server_id: "{{ server_id | default('3') }}"  # DHCP Server ID
    
    # FortiGate連接參數（優先從AWX credential獲取，否則從環境變數）
    fortigate_host: "{{ ansible_host | default(lookup('env', 'FORTIGATE_HOST')) }}"
    fortigate_token: "{{ fortigate_access_token | default(lookup('env', 'FORTIGATE_API_TOKEN')) }}"
    
  tasks:
    # =======================================================================
    # 步驟0：參數驗證
    # =======================================================================
    
    - name: "🔍 驗證必要參數"
      ansible.builtin.fail:
        msg: |
          ❌ 缺少必要的FortiGate連接參數！
          
          請確保以下參數已正確設定：
          1. FortiGate Host: {{ fortigate_host | default('未設定') }}
          2. FortiGate API Token: {{ '已設定' if fortigate_token else '未設定' }}
          
          設定方式：
          - 使用AWX Credential (推薦)
          - 或在Extra Variables中設定:
            ansible_host: "your_fortigate_ip"
            fortigate_access_token: "your_api_token"
      when: not fortigate_host or not fortigate_token
      tags:
        - validate

    # =======================================================================
    # 步驟1：輸入參數驗證和顯示
    # =======================================================================
    
    - name: "📋 顯示輸入參數"
      ansible.builtin.debug:
        msg: |
          ==========================================
          📋 FortiGate DHCP Reserved Address 管理
          ==========================================
          🎯 目標IP地址: {{ target_ip }}
          🔗 目標MAC地址: {{ target_mac }}
          📝 目標描述: {{ target_description }}
          🏷️  DHCP Server ID: {{ dhcp_server_id }}
          🌐 FortiGate Host: {{ fortigate_host }}
          🔑 API Token: {{ '已設定' if fortigate_token else '未設定' }}
          ==========================================

    # =======================================================================
    # 步驟2：獲取FortiGate當前DHCP reserved-address配置
    # =======================================================================
    
    - name: "🔍 獲取所有現有的DHCP保留位址"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ dhcp_server_id }}/reserved-address"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: false
        status_code: 200
      register: existing_reservations
      tags:
        - get_config

    - name: "📊 顯示獲取到的配置"
      ansible.builtin.debug:
        msg: |
          🔍 DHCP配置獲取結果：
          - 查詢成功: {{ existing_reservations.status == 200 }}
          - 保留位址數量: {{ existing_reservations.json.results | length }}
          
          📋 當前所有reserved-address配置：
          {% if existing_reservations.json.results | length > 0 %}
          {% for addr in existing_reservations.json.results %}
          - ID: {{ addr.id }}, IP: {{ addr.ip }}, MAC: {{ addr.mac }}, 描述: {{ addr.description | default('無') }}
          {% endfor %}
          {% else %}
          （目前沒有任何reserved-address配置）
          {% endif %}
      tags:
        - get_config

    # =======================================================================
    # 步驟3：MAC衝突檢測邏輯
    # =======================================================================
    
    - name: "🔍 尋找MAC位址相同的既有配置"
      ansible.builtin.set_fact:
        mac_conflict_object: "{{ item }}"
      loop: "{{ existing_reservations.json.results }}"
      when:
        - mac_conflict_object is not defined  # 只找第一個匹配的
        - item.mac.lower() == target_mac.lower()  # MAC地址比較（不區分大小寫）
      loop_control:
        label: "檢查 MAC {{ item.mac }}"
      tags:
        - conflict_check

    - name: "📋 顯示MAC衝突檢測結果"
      ansible.builtin.debug:
        msg: |
          ==========================================
          🔍 MAC衝突檢測分析結果
          ==========================================
          {% if mac_conflict_object is defined %}
          ⚠️  找到既有MAC配置:
             - ID: {{ mac_conflict_object.id }}
             - IP: {{ mac_conflict_object.ip }}
             - MAC: {{ mac_conflict_object.mac }}
             - 描述: {{ mac_conflict_object.description | default('無') }}
          
          🚫 MAC衝突狀態: {{ '是' if (mac_conflict_object.ip != target_ip) else '否' }}
          {% else %}
          ℹ️  未找到既有MAC配置
          🚫 MAC衝突狀態: 否
          {% endif %}
          ==========================================
      tags:
        - conflict_check

    # =======================================================================
    # 步驟4：MAC衝突時停止執行
    # =======================================================================
    
    - name: "🚫 MAC衝突檢測 - 顯示錯誤詳情"
      ansible.builtin.debug:
        msg:
          - "❌❌❌ MAC衝突檢測失敗！❌❌❌"
          - ""
          - "🔴 衝突詳情："
          - "  - 目標MAC: {{ target_mac }}"
          - "  - 目標IP: {{ target_ip }}"  
          - "  - 衝突原因: MAC {{ target_mac }} 已被分配給 IP {{ mac_conflict_object.ip }}"
          - ""
          - "💡 解決方案："
          - "  1. 使用不同的MAC地址"
          - "  2. 或者確認是否要更新既有IP {{ mac_conflict_object.ip }} 的配置"
          - ""
          - "⚠️  為避免網路衝突，操作將被終止！"
      when: mac_conflict_object is defined and mac_conflict_object.ip != target_ip
      tags:
        - conflict_check

    - name: "🚫 停止執行 - MAC衝突"
      ansible.builtin.fail:
        msg: "因MAC位址衝突而停止執行。MAC {{ target_mac }} 已被IP {{ mac_conflict_object.ip }} 使用。"
      when: mac_conflict_object is defined and mac_conflict_object.ip != target_ip
      tags:
        - conflict_check

    # =======================================================================
    # 步驟5：尋找目標IP配置，決定是新增還是更新
    # =======================================================================
    
    - name: "🔍 尋找目標IP的既有配置"
      ansible.builtin.set_fact:
        target_object_list: "{{ existing_reservations.json.results | selectattr('ip', 'equalto', target_ip) | list }}"
      tags:
        - find_target

    - name: "🎯 決定操作類型"
      ansible.builtin.set_fact:
        # 決定操作類型
        operation_type: >-
          {%- if target_object_list | length > 0 -%}
            更新既有配置
          {%- else -%}
            創建新配置
          {%- endif -%}
        
        # 決定是否需要執行操作
        needs_update: >-
          {%- if target_object_list | length == 0 -%}
            true
          {%- else -%}
            {{
              (target_object_list[0].mac != target_mac) or
              (target_object_list[0].description | default('') != target_description)
            }}
          {%- endif -%}
        
        # 如果是更新，取得目標對象
        target_object: "{{ target_object_list[0] if target_object_list | length > 0 else {} }}"
      tags:
        - find_target

    - name: "📋 顯示操作計畫"
      ansible.builtin.debug:
        msg: |
          ==========================================
          📋 操作執行計畫
          ==========================================
          🎯 操作類型: {{ operation_type }}
          🔄 需要更新: {{ '是' if needs_update else '否' }}
          
          {% if target_object_list | length > 0 %}
          📊 既有配置:
          - ID: {{ target_object.id }}
          - IP: {{ target_object.ip }}
          - MAC: {{ target_object.mac }}
          - 描述: {{ target_object.description | default('無') }}
          {% endif %}
          
          {% if needs_update %}
          📝 將要執行的{{ operation_type }}：
          - IP地址: {{ target_ip }}
          - MAC地址: {{ target_mac }}
          - 描述: {{ target_description }}
          {% else %}
          ℹ️  配置已符合目標狀態，無需更新
          {% endif %}
          ==========================================
      tags:
        - find_target

    # =======================================================================
    # 步驟6：跳過不必要的更新
    # =======================================================================
    
    - name: "✅ 配置已是最新狀態"
      ansible.builtin.debug:
        msg:
          - "✅✅✅ 配置檢查完成 ✅✅✅"
          - ""
          - "🎉 當前配置已符合目標狀態："
          - "  - IP: {{ target_ip }}"
          - "  - MAC: {{ target_mac }}"
          - "  - 描述: {{ target_description }}"
          - ""
          - "💡 無需執行任何變更操作！"
      when: not needs_update
      tags:
        - skip_update

    # =======================================================================
    # 步驟7：執行更新既有配置
    # =======================================================================
    
    - name: "🔧 更新既有DHCP保留位址"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ dhcp_server_id }}/reserved-address/{{ target_object.id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        body:
          mac: "{{ target_mac }}"
          description: "{{ target_description }}"
        body_format: json
        validate_certs: false
        status_code: 200
      register: update_result
      when: needs_update and target_object_list | length > 0
      tags:
        - execute_update

    # =======================================================================
    # 步驟8：執行創建新配置
    # =======================================================================
    
    - name: "🆕 創建新DHCP保留位址"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ dhcp_server_id }}/reserved-address"
        method: POST
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        body:
          ip: "{{ target_ip }}"
          mac: "{{ target_mac }}"
          description: "{{ target_description }}"
        body_format: json
        validate_certs: false
        status_code: 200
      register: create_result
      when: needs_update and target_object_list | length == 0
      tags:
        - execute_create

    # =======================================================================
    # 步驟9：顯示執行結果
    # =======================================================================
    
    - name: "🎉 更新成功"
      ansible.builtin.debug:
        msg:
          - "✅✅✅ 更新既有配置成功！✅✅✅"
          - ""
          - "📋 更新詳情："
          - "  - 目標IP: {{ target_ip }}"
          - "  - 更新後MAC: {{ target_mac }}"
          - "  - 更新後描述: {{ target_description }}"
          - "  - DHCP Server ID: {{ dhcp_server_id }}"
          - ""
          - "🎯 FortiGate配置已成功更新！"
      when: 
        - needs_update
        - target_object_list | length > 0
        - update_result is defined
        - update_result.json.revision_changed | default(false)
      tags:
        - show_result

    - name: "🎉 創建成功"
      ansible.builtin.debug:
        msg:
          - "✅✅✅ 創建新配置成功！✅✅✅"
          - ""
          - "📋 創建詳情："
          - "  - 新IP: {{ target_ip }}"
          - "  - MAC: {{ target_mac }}"
          - "  - 描述: {{ target_description }}"
          - "  - DHCP Server ID: {{ dhcp_server_id }}"
          - ""
          - "🎯 FortiGate配置已成功創建！"
      when: 
        - needs_update
        - target_object_list | length == 0
        - create_result is defined
        - create_result.json.revision_changed | default(false)
      tags:
        - show_result

    # =======================================================================
    # 步驟10：最終執行摘要
    # =======================================================================
    
    - name: "📊 執行摘要報告"
      ansible.builtin.debug:
        msg: |
          ==========================================
          📊 FortiGate DHCP 配置執行摘要
          ==========================================
          🎯 目標配置:
             - IP: {{ target_ip }}
             - MAC: {{ target_mac }}
             - 描述: {{ target_description }}
          
          🔧 執行結果:
             {% if not needs_update %}
             - 狀態: ℹ️  無需變更（配置已是最新）
             {% elif target_object_list | length > 0 and update_result is defined and update_result.json.revision_changed | default(false) %}
             - 狀態: ✅ 更新既有配置成功
             - 目標ID: {{ target_object.id }}
             {% elif target_object_list | length == 0 and create_result is defined and create_result.json.revision_changed | default(false) %}
             - 狀態: ✅ 創建新配置成功
             {% elif (update_result is defined and update_result is failed) or (create_result is defined and create_result is failed) %}
             - 狀態: ❌ 執行失敗
             {% else %}
             - 狀態: ⚠️  未執行操作
             {% endif %}
          
          📅 執行時間: {{ ansible_date_time.iso8601 | default('未知') }}
          ==========================================
      tags:
        - summary
