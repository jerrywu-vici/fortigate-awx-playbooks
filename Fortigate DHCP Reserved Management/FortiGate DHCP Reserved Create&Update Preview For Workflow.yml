---
# =============================================================================
# FortiGate DHCP Reserved Address Create&Update + Firewall Address Management Preview v2.1
# 用途：預覽DHCP Reserved Address + Firewall Address Object + Address Group的三階段操作
# 功能：智能檢測衝突、分析現有配置、判斷操作類型、驗證IP範圍、Address重複檢查
# 輸出：顯示三階段配置變更預覽，設定workflow變數
# 版本：v2.1 - 修正輸出斷行問題，統一命名規範，自定義IP範圍規則
# =============================================================================

- name: FortiGate DHCP + Firewall Address Management Preview For Workflow v2.1
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Survey 參數
    target_ip: "{{ ip_param }}"
    target_mac: "{{ mac_param }}"
    target_description: "{{ desc_param }}"
    target_dhcp_server_id: "{{ server_id }}"
    
    # Server ID 對應關係 (新增 Address Group 對應)
    server_mapping:
      "2":
        dhcp_description: "vlan40_PC"
        address_group: "Group_40_PC-Allow-MAC"
      "12":
        dhcp_description: "vlan22_FIC_WAN"
        address_group: "Group_22_FIC_Allow-MAC"
    
    # 自定義IP範圍規則
    custom_ip_range_mapping:
      "2":
        start_suffix: "150"
        end_suffix: "240"
      "12":
        start_suffix: "151"
        end_suffix: "190"
    
    # API 連接參數
    api_retries: "{{ fortigate_api_retries | default('3') | int }}"
    api_delay: "{{ fortigate_api_delay | default('5') | int }}"
    backup_enabled: "{{ fortigate_backup_enabled | default(true) | bool }}"
    connection_timeout: "{{ fortigate_timeout | default('30') | int }}"
    validate_certs: "{{ fortigate_validate_certs | default(false) | bool }}"
    
  tasks:
    # 記錄開始時間
    - name: "⏰ Record Preview Start Time"
      ansible.builtin.set_fact:
        preview_start_time: "{{ ansible_date_time.epoch | int }}"

    # ==================== 參數驗證區塊 ====================
    - name: "🔍 Validate FortiGate Credentials"
      ansible.builtin.fail:
        msg: |
          ❌ 缺少FortiGate Credential參數: {{ missing_params | join(', ') }}
          
          請確認Job Template已正確設定FortiGate Credential
      vars:
        required_params:
          - fortigate_host
          - fortigate_access_token
        missing_params: "{{ required_params | select('undefined') | list }}"
      when: 
        - fortigate_host is not defined or 
          fortigate_access_token is not defined

    - name: "🔍 Validate Survey Parameters"
      ansible.builtin.fail:
        msg: |
          ❌ 缺少Survey參數: {{ missing_survey_params | join(', ') }}
          
          請確認已正確填寫所有必要參數
      vars:
        required_survey_params:
          - ip_param
          - mac_param
          - desc_param
          - server_id
        missing_survey_params: "{{ required_survey_params | select('undefined') | list }}"
      when: 
        - ip_param is not defined or 
          mac_param is not defined or 
          desc_param is not defined or 
          server_id is not defined

    - name: "🔍 Validate Server ID"
      ansible.builtin.fail:
        msg: |
          ❌ 不支援的DHCP Server ID: {{ target_dhcp_server_id }}
          
          支援的ID: {{ server_mapping.keys() | list | join(', ') }}
          請選擇正確的Server ID
      when: target_dhcp_server_id not in server_mapping

    # ==================== 初始設定區塊 ====================
    - name: "🔧 Set Server Mapping Information"
      ansible.builtin.set_fact:
        server_info: "{{ server_mapping[target_dhcp_server_id] }}"
        target_address_group: "{{ server_mapping[target_dhcp_server_id].address_group }}"
        target_address_name: "MAC_{{ target_description }}"

    - name: "🔍 Validate IP Address Format"
      ansible.builtin.set_fact:
        ip_valid: "{{ target_ip | ansible.utils.ipaddr }}"

    - name: "❌ IP Address Format Error"
      ansible.builtin.fail:
        msg: |
          ❌ IP地址格式錯誤: {{ target_ip }}
          
          請使用正確的IPv4格式，例如：192.168.1.100
      when: not ip_valid

    - name: "🔍 Validate MAC Address Format"
      ansible.builtin.set_fact:
        mac_valid: "{{ target_mac | regex_search('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$') is not none }}"

    - name: "❌ MAC Address Format Error"
      ansible.builtin.fail:
        msg: |
          ❌ MAC地址格式錯誤: {{ target_mac }}
          
          正確格式: xx:xx:xx:xx:xx:xx 或 xx-xx-xx-xx-xx-xx
          範例: 00:11:22:33:44:55
      when: not mac_valid

    - name: "🔧 Normalize MAC Address Format"
      ansible.builtin.set_fact:
        normalized_mac: "{{ target_mac | replace('-', ':') | lower }}"

    # ==================== API 連接驗證 ====================
    - name: "🔌 Test FortiGate API Connection"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system/global"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: api_test
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "✅ API Connection Established"
      ansible.builtin.debug:
        msg: "✅ API連線成功 | FortiGate版本: {{ fortigate_version }}"
      vars:
        fortigate_version: "{{ api_test.json.results.version | default(api_test.json.version | default('未知')) }}"

    # ==================== DHCP Server 配置檢查 ====================
    - name: "🔍 Get DHCP Server Configuration"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ target_dhcp_server_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: dhcp_server_config
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "🔍 Extract API Network Prefix"
      ansible.builtin.set_fact:
        server_config: "{{ dhcp_server_config.json.results | first }}"
        api_ip_range_start: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['start-ip'] }}"
        api_ip_range_end: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['end-ip'] }}"
        ip_network_prefix: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['start-ip'].split('.')[0:3] | join('.') }}"

    - name: "🔧 Apply Custom IP Range Rules"
      ansible.builtin.set_fact:
        ip_range_start: "{{ ip_network_prefix }}.{{ custom_ip_range_mapping[target_dhcp_server_id].start_suffix }}"
        ip_range_end: "{{ ip_network_prefix }}.{{ custom_ip_range_mapping[target_dhcp_server_id].end_suffix }}"

    - name: "🔍 Check IP Within Custom Range"
      ansible.builtin.set_fact:
        ip_in_range: "{{ target_ip | ansible.utils.ipaddr and target_ip | ansible.utils.ipaddr >= ip_range_start | ansible.utils.ipaddr and target_ip | ansible.utils.ipaddr <= ip_range_end | ansible.utils.ipaddr }}"

    - name: "❌ IP Out of Range Error"
      ansible.builtin.fail:
        msg: |
          ❌ IP地址超出DHCP Server自定義範圍！
          
          詳情：
          - 目標IP: {{ target_ip }}
          - DHCP Server ID: {{ target_dhcp_server_id }} ({{ server_info.dhcp_description }})
          - 自定義允許範圍: {{ ip_range_start }} - {{ ip_range_end }}
          - 網段前綴: {{ ip_network_prefix }} (從API讀取)
          - API原始範圍: {{ api_ip_range_start }} - {{ api_ip_range_end }}
          
          解決方案：
          1. 選擇自定義範圍內的IP地址
          2. 或者選擇正確的DHCP Server ID
      when: not ip_in_range

    # ==================== 預覽資訊顯示 ====================
    - name: "📋 Three-Stage Preview Information Header"
      ansible.builtin.debug:
        msg: "==================== FortiGate DHCP Reserved Create&Update Preview v2.1 ===================="

    - name: "📋 Three-Stage Preview Parameters Summary"
      ansible.builtin.debug:
        msg: |
          🔍 三階段整合預覽模式 v2.1
          
          輸入參數:
          - 目標IP: {{ target_ip }}
          - 目標MAC: {{ normalized_mac }}
          - 描述: {{ target_description }}
          - DHCP Server: {{ target_dhcp_server_id }} ({{ server_info.dhcp_description }})
          - 自定義IP範圍: {{ ip_range_start }}-{{ ip_range_end }}
          - API原始範圍: {{ api_ip_range_start }}-{{ api_ip_range_end }}
          
          三階段操作:
          - 階段1: DHCP Reserved Address
          - 階段2: Firewall Address Object ({{ target_address_name }})
          - 階段3: Address Group Member ({{ target_address_group }})

    # ==================== 階段1: DHCP 配置分析區塊 ====================
    - name: "📊 Stage 1: DHCP Configuration Analysis Section Header"
      ansible.builtin.debug:
        msg: "==================== 階段1: DHCP 配置分析 ===================="

    - name: "🔍 Get Current DHCP Reserved Addresses"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ target_dhcp_server_id }}/reserved-address"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: existing_reservations
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "🔍 DHCP Configuration Information"
      ansible.builtin.debug:
        msg: "🔍 分析DHCP配置 | 總計: {{ existing_reservations.json.results | length }} 筆 | 目標IP: {{ target_ip }} | 目標MAC: {{ normalized_mac }}"

    # MAC 衝突檢測
    - name: "🔍 MAC Conflict Detection"
      ansible.builtin.set_fact:
        mac_conflict_object: "{{ item }}"
      loop: "{{ existing_reservations.json.results }}"
      when:
        - mac_conflict_object is not defined
        - item.mac.lower() == normalized_mac.lower()
      no_log: true

    - name: "❌ MAC Conflict Detected"
      ansible.builtin.fail:
        msg: |
          ❌ 階段1: MAC衝突檢測失敗！
          
          衝突詳情：
          - 目標MAC: {{ normalized_mac }}
          - 目標IP: {{ target_ip }}
          - 衝突原因: MAC {{ normalized_mac }} 已被分配給 IP {{ mac_conflict_object.ip }}
          - 既有配置: ID {{ mac_conflict_object.id }}, 描述: {{ mac_conflict_object.description | default('無') }}
          
          解決方案：
          1. 使用不同的MAC地址
          2. 或者修改目標IP為 {{ mac_conflict_object.ip }}
      when: 
        - mac_conflict_object is defined 
        - mac_conflict_object.ip != target_ip

    # IP 配置分析
    - name: "🔍 Find Target IP Configuration"
      ansible.builtin.set_fact:
        target_ip_objects: "{{ existing_reservations.json.results | selectattr('ip', 'equalto', target_ip) | list }}"

    - name: "🎯 Determine DHCP Operation Type"
      ansible.builtin.set_fact:
        dhcp_operation_type: >-
          {%- if target_ip_objects | length > 0 -%}
            UPDATE
          {%- else -%}
            CREATE
          {%- endif -%}
        dhcp_existing_object: "{{ target_ip_objects[0] if target_ip_objects | length > 0 else {} }}"
        dhcp_needs_operation: >-
          {%- if target_ip_objects | length == 0 -%}
            true
          {%- else -%}
            {{
              (target_ip_objects[0].mac.lower() != normalized_mac.lower()) or
              (target_ip_objects[0].description | default('') != target_description)
            }}
          {%- endif -%}

    # ==================== 階段2: Firewall Address Object 分析區塊 ====================
    - name: "🔥 Stage 2: Firewall Address Object Analysis Section Header"
      ansible.builtin.debug:
        msg: "==================== 階段2: Firewall Address Object 分析 ===================="

    - name: "🔍 Get Current Firewall Address Objects"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/address/{{ target_address_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: [200, 404]
        timeout: "{{ connection_timeout }}"
      register: existing_address
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "🎯 Determine Address Object Operation Type"
      ansible.builtin.set_fact:
        address_exists: "{{ existing_address.status == 200 }}"
        address_operation_type: >-
          {%- if existing_address.status == 200 -%}
            UPDATE
          {%- else -%}
            CREATE
          {%- endif -%}
        address_existing_object: "{{ existing_address.json.results | first if existing_address.status == 200 else {} }}"

    - name: "🎯 Determine Address Object Needs Operation"
      ansible.builtin.set_fact:
        address_needs_operation: >-
          {%- if existing_address.status == 404 -%}
            true
          {%- else -%}
            {{
              (existing_address.json.results | first).comment != target_ip or
              (existing_address.json.results | first).macaddr[0].macaddr.lower() != normalized_mac.lower()
            }}
          {%- endif -%}

    # ==================== 階段3: Address Group 分析區塊 ====================
    - name: "👥 Stage 3: Address Group Analysis Section Header"
      ansible.builtin.debug:
        msg: "==================== 階段3: Address Group 分析 ===================="

    - name: "🔍 Get Address Group Configuration"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/addrgrp/{{ target_address_group }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: address_group_config
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "🎯 Set Address Group Data"
      ansible.builtin.set_fact:
        group_data: "{{ address_group_config.json.results | first }}"
        current_group_members: "{{ (address_group_config.json.results | first).member }}"
        original_group_members: "{{ (address_group_config.json.results | first).member }}"

    - name: "🎯 Calculate Group Member Names"
      ansible.builtin.set_fact:
        group_member_names: "{{ current_group_members | map(attribute='name') | list }}"

    - name: "🎯 Determine Address Group Operation"
      ansible.builtin.set_fact:
        address_in_group: "{{ target_address_name in group_member_names }}"
        updated_group_members: "{{ current_group_members + [{'name': target_address_name}] }}"
        group_needs_operation: "{{ target_address_name not in group_member_names }}"

    # ==================== 三階段配置變更預覽區塊 ====================
    - name: "📊 Three-Stage Configuration Change Preview Section Header"
      ansible.builtin.debug:
        msg: "==================== 三階段配置變更預覽 ===================="

    - name: "📊 Stage 1: DHCP Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段1: DHCP 操作分析
          
          操作類型: {{ dhcp_operation_type }}
          需要執行: {{ '是' if dhcp_needs_operation else '否' }}
          檢查配置數: {{ existing_reservations.json.results | length }}
          {% if dhcp_existing_object | length > 0 %}
          
          當前配置:
          - ID: {{ dhcp_existing_object.id }}
          - IP: {{ dhcp_existing_object.ip }}
          - MAC: {{ dhcp_existing_object.mac }}
          - 描述: {{ dhcp_existing_object.description | default('空白') }}
          {% endif %}
          {% if dhcp_needs_operation %}
          
          {{ dhcp_operation_type }}後預覽:
          - IP: {{ target_ip }}
          - MAC: {{ normalized_mac }}
          - 描述: {{ target_description }}
          {% endif %}

    - name: "📊 Stage 2: Address Object Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段2: Address Object 操作分析
          
          Address Name: {{ target_address_name }}
          操作類型: {{ address_operation_type }}
          需要執行: {{ '是' if address_needs_operation else '否' }}
          {% if address_exists %}
          
          當前配置:
          - Name: {{ address_existing_object.name }}
          - Type: {{ address_existing_object.type }}
          - Comment: {{ address_existing_object.comment }}  
          - MAC: {{ address_existing_object.macaddr[0].macaddr if address_existing_object.macaddr is defined else '未知' }}
          {% endif %}
          {% if address_needs_operation %}
          
          {{ address_operation_type }}後預覽:
          - Name: {{ target_address_name }}
          - Type: mac
          - Comment: {{ target_ip }}
          - MAC: {{ normalized_mac }}
          {% endif %}

    - name: "📊 Stage 3: Address Group Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段3: Address Group 操作分析
          
          Group Name: {{ target_address_group }}
          Address在Group中: {{ '是' if address_in_group else '否' }}
          需要執行: {{ '是' if group_needs_operation else '否' }}
          當前Members數: {{ original_group_members | length }}
          {% if group_needs_operation %}
          操作後Members數: {{ updated_group_members | length }}
          {% endif %}

    # ==================== 整合操作摘要 ====================
    - name: "📊 Integrated Operations Summary"
      ansible.builtin.debug:
        msg: |
          📊 三階段操作總覽 v2.1
          
          階段1 (DHCP): {{ '✅需要執行' if dhcp_needs_operation else '⏭️跳過' }} ({{ dhcp_operation_type }})
          階段2 (Address): {{ '✅需要執行' if address_needs_operation else '⏭️跳過' }} ({{ address_operation_type }})
          階段3 (Group): {{ '✅需要執行' if group_needs_operation else '⏭️跳過' }} (ADD_MEMBER)
          
          執行條件: 前一階段成功才執行下一階段
          回滾機制: 後續階段失敗會回滾前面所有已完成的配置

    - name: "ℹ️ No Operations Required"
      ansible.builtin.debug:
        msg: |
          ℹ️ 所有階段檢查完成 v2.1
          
          目前所有配置都已符合目標狀態，無需執行任何變更操作:
          - DHCP Reserved Address: 已正確配置
          - Firewall Address Object: 已正確配置  
          - Address Group Member: 已包含目標Address
      when: 
        - not dhcp_needs_operation
        - not address_needs_operation  
        - not group_needs_operation

    # ==================== 配置備份記錄 ====================
    - name: "💾 Record Three-Stage Original Configuration for Backup"
      ansible.builtin.set_fact:
        three_stage_backup_info:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          stage1_dhcp:
            operation_type: "{{ dhcp_operation_type }}"
            needs_operation: "{{ dhcp_needs_operation }}"
            existing_config: "{{ dhcp_existing_object | default({}) }}"
          stage2_address:
            operation_type: "{{ address_operation_type }}"
            needs_operation: "{{ address_needs_operation }}"
            existing_config: "{{ address_existing_object | default({}) }}"
            address_name: "{{ target_address_name }}"
          stage3_group:
            operation_type: "ADD_MEMBER"
            needs_operation: "{{ group_needs_operation }}"
            group_name: "{{ target_address_group }}"
            original_members: "{{ original_group_members | default([]) }}"
            updated_members: "{{ updated_group_members | default([]) }}"
          target_config:
            ip: "{{ target_ip }}"
            mac: "{{ normalized_mac }}"
            description: "{{ target_description }}"
          server_info: "{{ server_info }}"
          ip_range:
            start: "{{ ip_range_start }}"
            end: "{{ ip_range_end }}"
            network_prefix: "{{ ip_network_prefix }}"
            api_original_start: "{{ api_ip_range_start }}"
            api_original_end: "{{ api_ip_range_end }}"
          purpose: "記錄三階段操作前的原始配置狀態 v2.1"
      when: backup_enabled

    # ==================== 操作警告 ====================
    - name: "⚠️ Three-Stage Configuration Change Warning"
      ansible.builtin.debug:
        msg: |
          ⚠️ 三階段操作警告 v2.1
          
          此操作將依序執行以下配置變更：
          {% if dhcp_needs_operation %}
          1. {{ '創建新的' if dhcp_operation_type == 'CREATE' else '修改既有的' }}DHCP Reserved Address
          {% endif %}
          {% if address_needs_operation %}
          2. {{ '創建新的' if address_operation_type == 'CREATE' else '修改既有的' }}Firewall Address Object
          {% endif %}
          {% if group_needs_operation %}
          3. 將Address Object加入Address Group成員
          {% endif %}
          
          請在Approval Node中仔細確認所有階段的變更後再批准執行！
      when: dhcp_needs_operation or address_needs_operation or group_needs_operation

    # ==================== 計算預覽時間 ====================
    - name: "⏱️ Calculate Preview Time"
      ansible.builtin.set_fact:
        preview_time_used: "{{ (ansible_date_time.epoch | int) - (preview_start_time | int) }}"

    - name: "⏱️ Preview Time Summary"
      ansible.builtin.debug:
        msg: "⏱️ 預覽用時: {{ preview_time_used }}s | 版本: v2.1"

    # ==================== Workflow 變數設定 ====================
    - name: "📤 Set Three-Stage Workflow Variables"
      ansible.builtin.set_stats:
        data:
          # 目標配置變數
          wf_target_ip: "{{ target_ip }}"
          wf_target_mac: "{{ normalized_mac }}"
          wf_target_description: "{{ target_description }}"
          wf_server_id: "{{ target_dhcp_server_id }}"
          # 階段1: DHCP 變數
          wf_dhcp_operation_type: "{{ dhcp_operation_type }}"
          wf_dhcp_needs_operation: "{{ dhcp_needs_operation }}"
          wf_dhcp_existing_object: "{{ dhcp_existing_object | to_json }}"
          # 階段2: Address 變數
          wf_address_name: "{{ target_address_name }}"  
          wf_address_operation_type: "{{ address_operation_type }}"
          wf_address_needs_operation: "{{ address_needs_operation }}"
          wf_address_existing_object: "{{ address_existing_object | to_json }}"
          wf_address_exists: "{{ address_exists }}"
          # 階段3: Group 變數
          wf_group_name: "{{ target_address_group }}"
          wf_group_needs_operation: "{{ group_needs_operation }}"
          wf_address_in_group: "{{ address_in_group }}"
          wf_original_group_members: "{{ original_group_members | default([]) | to_json }}"
          wf_updated_group_members: "{{ updated_group_members | default([]) | to_json }}"
          # 系統資訊變數
          wf_server_info: "{{ server_info | to_json }}"
          wf_backup_info: "{{ three_stage_backup_info | default({}) | to_json }}"
          wf_three_stage_operations: true
          wf_preview_version: "v2.1"

    - name: "🎯 Three-Stage Preview Complete"
      ansible.builtin.debug:
        msg: |-
          🎯 三階段整合預覽完成 | 版本: v2.1
          
          摘要:
          - 階段1 (DHCP): {{ dhcp_operation_type }} | {{ '需要執行' if dhcp_needs_operation else '跳過' }}
          - 階段2 (Address): {{ address_operation_type }} | {{ '需要執行' if address_needs_operation else '跳過' }}
          - 階段3 (Group): ADD_MEMBER | {{ '需要執行' if group_needs_operation else '跳過' }}
          
          目標: {{ target_ip }} | {{ normalized_mac }} | {{ target_description }}
          等待人工確認...
