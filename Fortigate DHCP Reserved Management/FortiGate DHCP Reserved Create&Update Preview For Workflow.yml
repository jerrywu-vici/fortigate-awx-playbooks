---
# =============================================================================
# FortiGate DHCP Reserved Address Create&Update + Firewall Address Management Preview v2.2
# 用途：預覽DHCP Reserved Address + Firewall Address Object + Address Group的三階段操作
# 功能：智能檢測衝突、分析現有配置、判斷操作類型、驗證IP範圍、Address重複檢查
# 輸出：顯示三階段配置變更預覽，設定workflow變數
# 版本：v2.2 - 使用pause模組修正輸出斷行問題
# =============================================================================

- name: FortiGate DHCP + Firewall Address Management Preview For Workflow v2.2
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Survey 參數
    target_ip: "{{ ip_param }}"
    target_mac: "{{ mac_param }}"
    target_description: "{{ desc_param }}"
    target_dhcp_server_id: "{{ server_id }}"
    
    # Server ID 對應關係 (新增 Address Group 對應)
    server_mapping:
      "2":
        dhcp_description: "vlan40_PC"
        address_group: "Group_40_PC-Allow-MAC"
      "12":
        dhcp_description: "vlan22_FIC_WAN"
        address_group: "Group_22_FIC_Allow-MAC"
    
    # 自定義IP範圍規則
    custom_ip_range_mapping:
      "2":
        start_suffix: "150"
        end_suffix: "240"
      "12":
        start_suffix: "151"
        end_suffix: "190"
    
    # API 連接參數
    api_retries: "{{ fortigate_api_retries | default('3') | int }}"
    api_delay: "{{ fortigate_api_delay | default('5') | int }}"
    backup_enabled: "{{ fortigate_backup_enabled | default(true) | bool }}"
    connection_timeout: "{{ fortigate_timeout | default('30') | int }}"
    validate_certs: "{{ fortigate_validate_certs | default(false) | bool }}"
    
  tasks:
    # 記錄開始時間
    - name: "⏰ Record Preview Start Time"
      ansible.builtin.set_fact:
        preview_start_time: "{{ ansible_date_time.epoch | int }}"

    # ==================== 參數驗證區塊 ====================
    - name: "🔍 Validate FortiGate Credentials"
      ansible.builtin.fail:
        msg: |
          ❌ 缺少FortiGate Credential參數: {{ missing_params | join(', ') }}
          
          請確認Job Template已正確設定FortiGate Credential
      vars:
        required_params:
          - fortigate_host
          - fortigate_access_token
        missing_params: "{{ required_params | select('undefined') | list }}"
      when: 
        - fortigate_host is not defined or 
          fortigate_access_token is not defined

    - name: "🔍 Validate Survey Parameters"
      ansible.builtin.fail:
        msg: |
          ❌ 缺少Survey參數: {{ missing_survey_params | join(', ') }}
          
          請確認已正確填寫所有必要參數
      vars:
        required_survey_params:
          - ip_param
          - mac_param
          - desc_param
          - server_id
        missing_survey_params: "{{ required_survey_params | select('undefined') | list }}"
      when: 
        - ip_param is not defined or 
          mac_param is not defined or 
          desc_param is not defined or 
          server_id is not defined

    - name: "🔍 Validate Server ID"
      ansible.builtin.fail:
        msg: |
          ❌ 不支援的DHCP Server ID: {{ target_dhcp_server_id }}
          
          支援的ID: {{ server_mapping.keys() | list | join(', ') }}
          請選擇正確的Server ID
      when: target_dhcp_server_id not in server_mapping

    # ==================== 初始設定區塊 ====================
    - name: "🔧 Set Server Mapping Information"
      ansible.builtin.set_fact:
        server_info: "{{ server_mapping[target_dhcp_server_id] }}"
        target_address_group: "{{ server_mapping[target_dhcp_server_id].address_group }}"
        target_address_name: "MAC_{{ target_description }}"

    - name: "🔍 Validate IP Address Format"
      ansible.builtin.set_fact:
        ip_valid: "{{ target_ip | ansible.utils.ipaddr }}"

    - name: "❌ IP Address Format Error"
      ansible.builtin.fail:
        msg: |
          ❌ IP地址格式錯誤: {{ target_ip }}
          
          請使用正確的IPv4格式，例如：192.168.1.100
      when: not ip_valid

    - name: "🔍 Validate MAC Address Format"
      ansible.builtin.set_fact:
        mac_valid: "{{ target_mac | regex_search('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$') is not none }}"

    - name: "❌ MAC Address Format Error"
      ansible.builtin.fail:
        msg: |
          ❌ MAC地址格式錯誤: {{ target_mac }}
          
          正確格式: xx:xx:xx:xx:xx:xx 或 xx-xx-xx-xx-xx-xx
          範例: 00:11:22:33:44:55
      when: not mac_valid

    - name: "🔧 Normalize MAC Address Format"
      ansible.builtin.set_fact:
        normalized_mac: "{{ target_mac | replace('-', ':') | lower }}"

    # ==================== API 連接驗證 ====================
    - name: "🔌 Test FortiGate API Connection"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system/global"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: api_test
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "✅ API Connection Established"
      ansible.builtin.debug:
        msg: "✅ API連線成功 | FortiGate版本: {{ fortigate_version }}"
      vars:
        fortigate_version: "{{ api_test.json.results.version | default(api_test.json.version | default('未知')) }}"

    # ==================== DHCP Server 配置檢查 ====================
    - name: "🔍 Get DHCP Server Configuration"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ target_dhcp_server_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_access_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: dhcp_server_config
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "🔍 Extract API Network Prefix"
      ansible.builtin.set_fact:
        server_config: "{{ dhcp_server_config.json.results | first }}"
        api_ip_range_start: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['start-ip'] }}"
        api_ip_range_end: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['end-ip'] }}"
        ip_network_prefix: "{{ (dhcp_server_config.json.results | first)['ip-range'][0]['start-ip'].split('.')[0:3] | join('.') }}"

    - name: "🔧 Apply Custom IP Range Rules"
      ansible.builtin.set_fact:
        ip_range_start: "{{ ip_network_prefix }}.{{ custom_ip_range_mapping[target_dhcp_server_id].start_suffix }}"
        ip_range_end: "{{ ip_network_prefix }}.{{ custom_ip_range_mapping[target_dhcp_server_id].end_suffix }}"

    - name: "🔍 Check IP Within Custom Range"
      ansible.builtin.set_fact:
        ip_in_range: "{{ target_ip | ansible.utils.ipaddr and target_ip | ansible.utils.ipaddr >= ip_range_start | ansible.utils.ipaddr and target_ip | ansible.utils.ipaddr <= ip_range_end | ansible.utils.ipaddr }}"

    - name: "❌ IP Out of Range Error"
      ansible.builtin.fail:
        msg: |
          ❌ IP地址超出DHCP Server自定義範圍！
          
          詳情：
          - 目標IP: {{ target_ip }}
          - DHCP Server ID: {{ target_dhcp_server_id }} ({{ server_info.dhcp_description }})
          - 自定義允許範圍: {{ ip_range_start }} - {{ ip_range_end }}
          - 網段前綴: {{ ip_network_prefix }} (從API讀取)
          - API原始範圍: {{ api_ip_range_start }} - {{ api_ip_range_end }}
          
          解決方案：
          1. 選擇自定義範圍內的IP地址
          2. 或者選擇正確的DHCP Server ID
      when: not ip_in_range

    # ==================== 預覽資訊顯示 ====================
    - name: "📋 Three-Stage Preview Information Header"
      ansible.builtin.debug:
        msg: "==================== FortiGate DHCP Reserved Create&Update Preview v2.2 ===================="

    - name: "📋 Three-Stage Preview Parameters Summary"
      ansible.builtin.debug:
        msg: |
          🔍 三階段整合預覽模式 v2.2
          
          輸入參數:
          - 目標IP: {{ target_ip }}
          - 目標MAC: {{ normalized_mac }}
          - 描述: {{ target_description }}
          - DHCP Server: {{ target_dhcp_server_id }} ({{ server_info.dhcp_description }})
          - 自定義IP範圍: {{ ip_range_start }}-{{ ip_range_end }}
          - API原始範圍: {{ api_ip_range_start }}-{{ api_ip_range_end }}
          
          三階段操作:
          - 階段1: DHCP Reserved Address
          - 階段2: Firewall Address Object ({{ target_address_name }})
          - 階段3: Address Group Member ({{ target_address_group }})

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1

    # ==================== 三階段配置變更預覽區塊 ====================
    - name: "📊 Stage 1: DHCP Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段1: DHCP 操作分析
          
          操作類型: {{ dhcp_operation_type }}
          需要執行: {{ '是' if dhcp_needs_operation else '否' }}
          檢查配置數: {{ existing_reservations.json.results | length }}
          {% if dhcp_existing_object | length > 0 %}
          
          當前配置:
          - ID: {{ dhcp_existing_object.id }}
          - IP: {{ dhcp_existing_object.ip }}
          - MAC: {{ dhcp_existing_object.mac }}
          - 描述: {{ dhcp_existing_object.description | default('空白') }}
          {% endif %}
          {% if dhcp_needs_operation %}
          
          {{ dhcp_operation_type }}後預覽:
          - IP: {{ target_ip }}
          - MAC: {{ normalized_mac }}
          - 描述: {{ target_description }}
          {% endif %}

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1

    - name: "📊 Stage 2: Address Object Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段2: Address Object 操作分析
          
          Address Name: {{ target_address_name }}
          操作類型: {{ address_operation_type }}
          需要執行: {{ '是' if address_needs_operation else '否' }}
          {% if address_exists %}
          
          當前配置:
          - Name: {{ address_existing_object.name }}
          - Type: {{ address_existing_object.type }}
          - Comment: {{ address_existing_object.comment }}  
          - MAC: {{ address_existing_object.macaddr[0].macaddr if address_existing_object.macaddr is defined else '未知' }}
          {% endif %}
          {% if address_needs_operation %}
          
          {{ address_operation_type }}後預覽:
          - Name: {{ target_address_name }}
          - Type: mac
          - Comment: {{ target_ip }}
          - MAC: {{ normalized_mac }}
          {% endif %}

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1

    - name: "📊 Stage 3: Address Group Operation Analysis"
      ansible.builtin.debug:
        msg: |
          📊 階段3: Address Group 操作分析
          
          Group Name: {{ target_address_group }}
          Address在Group中: {{ '是' if address_in_group else '否' }}
          需要執行: {{ '是' if group_needs_operation else '否' }}
          當前Members數: {{ original_group_members | length }}
          {% if group_needs_operation %}
          操作後Members數: {{ updated_group_members | length }}
          {% endif %}

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1

    # ==================== 整合操作摘要 ====================
    - name: "📊 Integrated Operations Summary"
      ansible.builtin.debug:
        msg: |
          📊 三階段操作總覽 v2.2
          
          階段1 (DHCP): {{ '✅需要執行' if dhcp_needs_operation else '⏭️跳過' }} ({{ dhcp_operation_type }})
          階段2 (Address): {{ '✅需要執行' if address_needs_operation else '⏭️跳過' }} ({{ address_operation_type }})
          階段3 (Group): {{ '✅需要執行' if group_needs_operation else '⏭️跳過' }} (ADD_MEMBER)
          
          執行條件: 前一階段成功才執行下一階段
          回滾機制: 後續階段失敗會回滾前面所有已完成的配置

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1

    - name: "ℹ️ No Operations Required"
      ansible.builtin.debug:
        msg: |
          ℹ️ 所有階段檢查完成 v2.2
          
          目前所有配置都已符合目標狀態，無需執行任何變更操作:
          - DHCP Reserved Address: 已正確配置
          - Firewall Address Object: 已正確配置  
          - Address Group Member: 已包含目標Address
      when: 
        - not dhcp_needs_operation
        - not address_needs_operation  
        - not group_needs_operation

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1
      when: 
        - not dhcp_needs_operation
        - not address_needs_operation  
        - not group_needs_operation

    - name: "⚠️ Three-Stage Configuration Change Warning"
      ansible.builtin.debug:
        msg: |
          ⚠️ 三階段操作警告 v2.2
          
          此操作將依序執行以下配置變更：
          {% if dhcp_needs_operation %}
          1. {{ '創建新的' if dhcp_operation_type == 'CREATE' else '修改既有的' }}DHCP Reserved Address
          {% endif %}
          {% if address_needs_operation %}
          2. {{ '創建新的' if address_operation_type == 'CREATE' else '修改既有的' }}Firewall Address Object
          {% endif %}
          {% if group_needs_operation %}
          3. 將Address Object加入Address Group成員
          {% endif %}
          
          請在Approval Node中仔細確認所有階段的變更後再批准執行！
      when: dhcp_needs_operation or address_needs_operation or group_needs_operation

    - name: "⏸️ Format Output Pause"
      ansible.builtin.pause:
        seconds: 1
      when: dhcp_needs_operation or address_needs_operation or group_needs_operation

    - name: "🎯 Three-Stage Preview Complete"
      ansible.builtin.debug:
        msg: |
          🎯 三階段整合預覽完成 | 版本: v2.2
          
          摘要:
          - 階段1 (DHCP): {{ dhcp_operation_type }} | {{ '需要執行' if dhcp_needs_operation else '跳過' }}
          - 階段2 (Address): {{ address_operation_type }} | {{ '需要執行' if address_needs_operation else '跳過' }}
          - 階段3 (Group): ADD_MEMBER | {{ '需要執行' if group_needs_operation else '跳過' }}
          
          目標: {{ target_ip }} | {{ normalized_mac }} | {{ target_description }}
          等待人工確認...
