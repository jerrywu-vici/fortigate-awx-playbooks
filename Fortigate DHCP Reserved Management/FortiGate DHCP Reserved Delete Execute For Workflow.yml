---
# =============================================================================
# FortiGate DHCP Reserved Address Delete + Firewall Address Delete Execute v6.0
# 用途：執行實際的MAC刪除操作（DHCP + Firewall Address）
# 功能：1. DHCP MAC還原為Reserved 2. Firewall Address從Group移除並刪除
# 執行順序：DHCP還原 → Address Group移除 → Address Object刪除
# 輸入：接收Preview步驟的workflow變數（包含DHCP和Firewall資訊）
# 輸出：執行結果和操作摘要
# 版本：v6.0 - 優化代碼結構，統一版本號
# =============================================================================

- name: FortiGate DHCP Reserved Delete Execute For Workflow v6.0
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # 接收workflow變數 - DHCP相關
    dhcp_enabled: "{{ (wf_dhcp_enabled | default('false')) | bool }}"
    dhcp_target_id: "{{ wf_dhcp_target_id }}"
    dhcp_target_ip: "{{ wf_dhcp_target_ip }}"
    dhcp_original_mac: "{{ wf_dhcp_original_mac }}"
    dhcp_reserved_mac: "{{ wf_dhcp_reserved_mac }}"
    dhcp_original_desc: "{{ wf_dhcp_original_desc }}"
    ip_fourth_octet: "{{ wf_ip_fourth_octet }}"
    first_digit: "{{ wf_first_digit }}"
    last_two_digits: "{{ wf_last_two_digits }}"
    
    # 接收workflow變數 - Firewall相關
    firewall_enabled: "{{ (wf_firewall_enabled | default('false')) | bool }}"
    firewall_address_name: "{{ wf_firewall_address_name }}"
    firewall_address_mac: "{{ wf_firewall_address_mac }}"
    firewall_address_comment: "{{ wf_firewall_address_comment }}"
    address_group_name: "{{ wf_address_group_name }}"
    address_in_group: "{{ (wf_address_in_group | default('false')) | bool }}"
    original_group_members: "{{ (wf_original_group_members | default('[]')) | from_json }}"
    updated_group_members: "{{ (wf_updated_group_members | default('[]')) | from_json }}"
    
    # 接收workflow變數 - 共用
    server_id: "{{ wf_server_id }}"
    delete_mac: "{{ wf_delete_mac }}"
    server_info: "{{ (wf_server_info | default('{}')) | from_json }}"
    backup_info: "{{ (wf_backup_info | default('{}')) | from_json }}"
    vdom_name: "{{ wf_vdom_name | default('root') }}"
    preview_version: "{{ wf_preview_version | default('unknown') }}"
    
    # FortiGate連接參數
    fortigate_host: "{{ fortigate_host }}"
    fortigate_token: "{{ fortigate_access_token }}"
    api_retries: "{{ fortigate_api_retries | default('3') | int }}"
    api_delay: "{{ fortigate_api_delay | default('5') | int }}"
    backup_enabled: "{{ fortigate_backup_enabled | default(true) | bool }}"
    connection_timeout: "{{ fortigate_timeout | default('30') | int }}"
    validate_certs: "{{ fortigate_validate_certs | default(false) | bool }}"
    
  tasks:
    # ==================== 參數驗證區塊 ====================
    - name: "🔍 Validate Workflow Parameters"
      ansible.builtin.fail:
        msg: "從Workflow接收參數失敗！缺少關鍵參數。此Job Template僅應在Workflow中執行。"
      when: 
        - server_id is not defined or 
          delete_mac is not defined or
          preview_version is not defined

    - name: "🔍 Validate FortiGate Credentials"
      ansible.builtin.fail:
        msg: "缺少FortiGate Credential參數！請確認Job Template已正確設定Credential。"
      when: 
        - fortigate_host is not defined or 
          fortigate_access_token is not defined

    # ==================== API 連接驗證 ====================
    - name: "🔌 Test FortiGate API Connection"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system/global"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: api_connection_test
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"

    - name: "✅ API Connection Established"
      ansible.builtin.debug:
        msg: "✅ API連線成功 | FortiGate版本: {{ fortigate_version }}"
      vars:
        fortigate_version: "{{ api_connection_test.json.results.version | default(api_connection_test.json.version | default('未知')) }}"

    # ==================== 執行資訊顯示 ====================
    - name: "📋 Execution Information Header"
      ansible.builtin.debug:
        msg: "==================== FortiGate DHCP + Firewall Delete Execute v6.0 ===================="

    - name: "🚀 Execute Parameters Summary"
      ansible.builtin.debug:
        msg: "🚀 整合執行模式 | 已通過人工確認 | MAC: {{ delete_mac }} | DHCP: {{ 'ON' if dhcp_enabled else 'OFF' }} | Firewall: {{ 'ON' if firewall_enabled else 'OFF' }} | Server: {{ server_id }}"

    - name: "📊 Operations Overview"
      ansible.builtin.debug:
        msg: "📊 操作概覽 | DHCP Server: {{ server_info.dhcp_description | default('N/A') }} | Address Group: {{ address_group_name }} | Address Object: {{ firewall_address_name | default('N/A') }} | Address在Group中: {{ address_in_group }}"

    # ==================== DHCP 執行區塊 ====================
    - name: "📊 DHCP Execution Section Header"
      ansible.builtin.debug:
        msg: "==================== DHCP 執行區塊 ===================="
      when: dhcp_enabled

    - name: "🔍 DHCP Pre-execution Verification"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ server_id }}/reserved-address/{{ dhcp_target_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: dhcp_pre_execution_config
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: dhcp_enabled

    - name: "🔍 DHCP Configuration Consistency Check"
      ansible.builtin.set_fact:
        dhcp_config_consistent: "{{ 
          (dhcp_pre_execution_config.json.results | first).ip == dhcp_target_ip and 
          (dhcp_pre_execution_config.json.results | first).mac.lower() == dhcp_original_mac.lower() 
        }}"
      when: dhcp_enabled

    - name: "❌ DHCP Configuration Changed"
      ansible.builtin.fail:
        msg: "DHCP操作終止：配置在Preview後已被修改，請重新執行Preview步驟"
      when: 
        - dhcp_enabled
        - not dhcp_config_consistent

    - name: "🔧 Execute DHCP MAC Delete Operation"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ server_id }}/reserved-address/{{ dhcp_target_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        body:
          ip: "{{ dhcp_target_ip }}"
          mac: "{{ dhcp_reserved_mac }}"
          description: "Reserved"
        body_format: json
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: dhcp_result
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: dhcp_enabled

    - name: "🎉 DHCP Operation Success"
      ansible.builtin.debug:
        msg: "✅ DHCP操作成功 | ID: {{ dhcp_target_id }} | IP: {{ dhcp_target_ip }} | MAC: {{ dhcp_original_mac }}→{{ dhcp_reserved_mac }}"
      when: 
        - dhcp_enabled
        - dhcp_result.status == 200

    - name: "❌ DHCP Operation Failed"
      ansible.builtin.fail:
        msg: "❌ DHCP操作失敗，停止後續Firewall操作 | HTTP狀態: {{ dhcp_result.status | default('未知') }} | 錯誤: {{ dhcp_result.msg | default('未知') }}"
      when: 
        - dhcp_enabled
        - dhcp_result.status != 200

    - name: "⏭️ DHCP Operation Skipped"
      ansible.builtin.debug:
        msg: "⏭️ DHCP操作已跳過（Preview中未找到目標MAC）"
      when: not dhcp_enabled

    # ==================== Firewall 執行區塊 ====================
    - name: "🔥 Firewall Execution Section Header"
      ansible.builtin.debug:
        msg: "==================== Firewall 執行區塊 ===================="
      when: firewall_enabled

    - name: "📋 Firewall Execution Plan"
      ansible.builtin.debug:
        msg: "📋 執行計劃 | Step 1: {{ '從Group移除Member' if address_in_group else '跳過Group更新' }} | Step 2: 刪除Address Object | Address: {{ firewall_address_name }}"
      when: firewall_enabled

    # Step 1: Firewall Address Group 更新（移除member）
    - name: "🔧 Remove Address from Address Group"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/addrgrp/{{ address_group_name }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        body:
          member: "{{ updated_group_members }}"
        body_format: json
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: group_update_result
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: 
        - firewall_enabled
        - address_in_group

    - name: "🎉 Address Group Update Success"
      ansible.builtin.debug:
        msg: "✅ Address Group更新成功 | Group: {{ address_group_name }} | 移除Member: {{ firewall_address_name }} | 剩餘Members: {{ updated_group_members | length }}"
      when: 
        - firewall_enabled
        - address_in_group
        - group_update_result.status == 200

    - name: "❌ Address Group Update Failed"
      ansible.builtin.fail:
        msg: "❌ Address Group更新失敗，停止Address刪除 | Group: {{ address_group_name }} | HTTP狀態: {{ group_update_result.status | default('未知') }} | 錯誤: {{ group_update_result.json.cli_error | default([group_update_result.msg | default('未知')]) | join(', ') }}"
      when: 
        - firewall_enabled
        - address_in_group
        - group_update_result.status != 200

    - name: "ℹ️ Address Not in Group - Skip Group Update"
      ansible.builtin.debug:
        msg: "ℹ️ Address {{ firewall_address_name }} 不在 Group {{ address_group_name }} 中，跳過Group更新，直接進行Address刪除"
      when: 
        - firewall_enabled
        - not address_in_group

    # Step 2: 執行 Firewall Address 刪除
    - name: "🔧 Execute Firewall Address Delete"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/address/{{ firewall_address_name }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: address_delete_result
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: 
        - firewall_enabled
        - (not address_in_group) or (address_in_group and group_update_result.status == 200)

    - name: "🎉 Firewall Address Delete Success"
      ansible.builtin.debug:
        msg: "✅ Address刪除成功 | Name: {{ firewall_address_name }} | MAC: {{ firewall_address_mac }} | Comment: {{ firewall_address_comment }}"
      when: 
        - firewall_enabled
        - address_delete_result.status == 200

    - name: "❌ Firewall Address Delete Failed"
      ansible.builtin.debug:
        msg: "❌ Address刪除失敗 | Name: {{ firewall_address_name }} | HTTP狀態: {{ address_delete_result.status | default('未知') }} | 錯誤: {{ address_delete_result.json.cli_error | default([address_delete_result.msg | default('未知')]) | join(', ') }}"
      when: 
        - firewall_enabled
        - address_delete_result.status != 200

    - name: "⏭️ Firewall Operation Skipped"
      ansible.builtin.debug:
        msg: "⏭️ Firewall操作已跳過（Preview中未找到目標Address Object）"
      when: not firewall_enabled

    # ==================== 操作後驗證區塊 ====================
    - name: "🔍 Post-execution Verification Section Header"
      ansible.builtin.debug:
        msg: "==================== 操作後驗證 ===================="

    - name: "🔍 Verify DHCP Configuration"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/system.dhcp/server/{{ server_id }}/reserved-address/{{ dhcp_target_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: dhcp_verification
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: 
        - dhcp_enabled
        - dhcp_result is defined
        - dhcp_result.status == 200

    - name: "✅ DHCP Verification Result"
      ansible.builtin.debug:
        msg: "✅ DHCP驗證通過 | 當前MAC: {{ (dhcp_verification.json.results | first).mac }} | 當前描述: {{ (dhcp_verification.json.results | first).description }}"
      when: 
        - dhcp_enabled
        - dhcp_verification is defined
        - dhcp_verification.json is defined
        - dhcp_verification.json.results | length > 0

    - name: "🔍 Verify Address Deletion"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/address/{{ firewall_address_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: [200, 404]
        timeout: "{{ connection_timeout }}"
      register: address_verification
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: 
        - firewall_enabled
        - address_delete_result is defined
        - address_delete_result.status == 200

    - name: "✅ Address Deletion Verification"
      ansible.builtin.debug:
        msg: "{{ '✅ Address刪除驗證通過（404 Not Found）' if address_verification.status == 404 else '⚠️ Address可能仍存在（200 OK）' }}"
      when: 
        - firewall_enabled
        - address_verification is defined

    - name: "🔍 Verify Address Group Update"
      ansible.builtin.uri:
        url: "https://{{ fortigate_host }}/api/v2/cmdb/firewall/addrgrp/{{ address_group_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        validate_certs: "{{ validate_certs }}"
        status_code: 200
        timeout: "{{ connection_timeout }}"
      register: group_verification
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      when: 
        - firewall_enabled
        - address_in_group
        - group_update_result is defined
        - group_update_result.status == 200

    - name: "✅ Address Group Verification"
      ansible.builtin.debug:
        msg: "✅ Address Group驗證通過 | Group: {{ address_group_name }} | 當前Members數: {{ (group_verification.json.results | first).member | length }} | Address已移除: {{ firewall_address_name not in (group_verification.json.results | first).member | map(attribute='name') | list }}"
      when: 
        - firewall_enabled
        - group_verification is defined
        - group_verification.json is defined
        - group_verification.json.results is defined
        - group_verification.json.results | length > 0

    # ==================== 最終摘要區塊 ====================
    - name: "📊 Final Summary Section Header"
      ansible.builtin.debug:
        msg: "==================== 最終摘要 ===================="

    - name: "📊 Integrated Operation Results"
      ansible.builtin.debug:
        msg: "📊 整合操作結果 | MAC: {{ delete_mac }} | DHCP: {{ dhcp_status }} | Firewall: {{ firewall_status }}"
      vars:
        dhcp_status: "{{ '✅成功' if (dhcp_enabled and dhcp_result is defined and dhcp_result.status == 200) else ('⏭️跳過' if not dhcp_enabled else '❌失敗') }}"
        firewall_status: "{{ '✅成功' if (firewall_enabled and address_delete_result is defined and address_delete_result.status == 200) else ('⏭️跳過' if not firewall_enabled else '❌失敗') }}"

    - name: "📊 DHCP Summary"
      ansible.builtin.debug:
        msg: "📊 DHCP摘要 | Server: {{ server_id }} ({{ server_info.dhcp_description | default('N/A') }}) | {{ dhcp_original_mac }}→{{ dhcp_reserved_mac }} | 描述: Reserved"
      when: dhcp_enabled

    - name: "📊 Firewall Summary"
      ansible.builtin.debug:
        msg: "📊 Firewall摘要 | Address: {{ firewall_address_name }} | Group: {{ address_group_name }} | Group更新: {{ group_status }} | Address刪除: {{ address_status }}"
      vars:
        group_status: "{{ '✅成功' if (address_in_group and group_update_result is defined and group_update_result.status == 200) else ('⏭️跳過' if not address_in_group else '❌失敗') }}"
        address_status: "{{ '✅成功' if (address_delete_result is defined and address_delete_result.status == 200) else '❌失敗' }}"
      when: firewall_enabled

    - name: "📅 Completion Information"
      ansible.builtin.debug:
        msg: "📅 完成時間: {{ ansible_date_time.iso8601 }} | 版本: v6.0"
